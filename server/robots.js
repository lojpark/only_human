const Robot = require('../server/robot.js');
const KillerRobot = require('../server/killerrobot.js');

class Robots {
    constructor(players, bullets, leaderboard, map) {
        this.players = players;
        this.bullets = bullets;
        this.leaderboard = leaderboard;
        this.map = map;

        this.robots = {};

        this.humanCandidate = {};

        this.gene_number = 0;
    }

    generate_gene() {
        let good_genes = Array(5);
        let new_gene = Array(12);
        
        /*
        good_genes[0] = [0.005, 0.1, 0.8, 0.5, 100, 100, 150, 0.33, 0.33, 150, 150, 150];
        good_genes[1] = [0.005, 0.1, 0.8, 0.5, 100, 100, 150, 0.33, 0.33, 150, 150, 150];
        good_genes[2] = [0.005, 0.1, 0.8, 0.5, 100, 100, 150, 0.33, 0.33, 150, 150, 150];
        good_genes[3] = [0.005, 0.1, 0.8, 0.5, 100, 100, 150, 0.33, 0.33, 150, 150, 150];
        good_genes[4] = [0.005, 0.1, 0.8, 0.5, 100, 100, 150, 0.33, 0.33, 150, 150, 150];
        */
        /*
        good_genes[0] = [0.0055, 0.097, 0.69, 0.54, 89.01, 85.78, 169.91767136852465,0.33848619379331835,0.2957705815318136,157.08735767575007,147.85588545200443,147.6061680990814];
        good_genes[1] = [0.00556446139258265,0.12229808571837567,0.7261585424492097,0.3231905393387774,77.20384046968296,71.7969339545173,185.47118945495646,0.48673110647933093,0.3500835638176354,216.10750047063257,109.0224832535854,200.64283383517392];
        good_genes[2] = [0.0048958586765512025,0.10688481484590631,0.8358941745492556,0.4953647573354865,89.49674736192108,108.74519078498422,147.10555209544611,0.3371532279529981,0.29413571871688377,133.43145009687308,160.62035809747186,139.31879689132344];
        good_genes[3] = [0.005738962187180008,0.10614283779826689,0.7456535666580758,0.5560227671529019,107.54466471782511,96.40195788503077,146.73224480778944,0.33666096538055507,0.3351468882882662,168.21535790716817,136.1442598097555,165.02956805352116];
        good_genes[4] = [0.004749618422248785,0.1052861542647815,0.9116056831655657,0.4989303476969293,101.08601569268343,102.9685742275702,138.86378832067427,0.31745384293416024,0.31251747602106245,138.6377391084869,158.20981126670333,149.57382404588338];
        */
        /*
        good_genes[0] = [0.005597739877192342,0.09401274111722091,0.913785025451248,0.4855776659679312,100.50359627361077,85.44867316845955,171.84314840208597,0.3647550670029225,0.3092788548310047,155.2151629908231,136.86518571991752,145.27794396554808];
        good_genes[1] = [0.005076972089518327,0.08702378704080535,0.7553500994077608,0.48847630768414546,89.96884967548483,106.13289487368684,147.6909434579777,0.33186574149403253,0.32511728062759965,143.2967674083293,132.11534001395162,160.38381811384343];
        good_genes[2] = [0.005569565855667441,0.11734086914921275,0.7789867722028723,0.5243677201022554,87.78526381883827,111.54869511144271,156.53361483926636,0.2941434001519041,0.2778219569524742,134.06859766059387,155.27627765776836,145.29211786837698];
        good_genes[3] = [0.005218032595135669,0.10867718518008784,0.8107550255056327,0.434646917956251,72.72254575590362,81.39639587253745,164.3818643271604,0.4312672131548319,0.35903853776086847,187.6274807109845,134.77143844774307,152.64525783936054];
        good_genes[4] = [0.004838143868005003,0.10780875048597764,0.8562180971828384,0.5025112089682472,99.28579145392904,82.42621052594217,169.9100221663857,0.36914693731303666,0.3304954732984197,146.06588939252669,164.80966812862954,159.133794127949];
        */
        /*
        good_genes[0] = [0.004579430183396763,0.09775368019831761,0.7505877452232417,0.4521209457657348,91.65797328274722,109.08079895071198,178.21703568327962,0.2960152100322703,0.3441181031689998,134.50858700161953,173.66214271311205,133.50253736445882];
        good_genes[1] = [0.005519951157723052,0.11387529308169562,0.7513633200760466,0.5894626167623293,86.38939425548972,90.00118570079123,148.88301737600133,0.35418934195962437,0.27628338946685355,154.46099059879606,145.81745167526842,167.7848430655775];
        good_genes[2] = [0.005066598191806441,0.08322060949056635,0.7205319802135665,0.4893881367448582,71.39713482354874,106.10096701016082,140.53947817655455,0.37801758975655425,0.34246737012951656,186.9030710955417,142.17254441814404,147.5811374733259];
        good_genes[3] = [0.005200516607695681,0.09567390736874351,0.8306584068534789,0.5659954103963869,90.8656360700185,80.99313268286524,174.8710622595288,0.3614576623551814,0.30057226562220596,128.8040630788329,158.72073686800445,172.7383043547503];
        good_genes[4] = [0.005656867274627439,0.11586261757388233,0.7792370092699693,0.5467251480796472,97.55768990862832,90.85064687160205,183.6717566621616,0.4197998355519809,0.2911095544208909,138.5807512823071,156.06618415092242,156.89749239390093];
        */
        /*
        good_genes[0] = [0.005221338433662722,0.0964198797514861,0.8526625313943609,0.5366612699786857,87.9467549562551,95.31416257155388,135.24462389588345,0.38224248370056546,0.34165829333509556,180.91051184086766,137.2450765862806,150.78906080345348];
        good_genes[1] = [0.004948084374365481,0.10855299339378849,0.8122981405784203,0.4565768505376076,98.83595925457313,87.44703206650182,182.56536646442143,0.34938563175165577,0.2951923398350131,128.85936210798516,161.26094163132473,131.86417609081212];
        good_genes[2] = [0.005399556999990506,0.09972165018258491,0.741307559316059,0.5083991429525654,72.51639868943957,105.99388227622701,124.27581382147768,0.37696743679054595,0.3306929287255152,190.07279777700197,131.31181178700007,168.4115199943014];
        good_genes[3] = [0.006024001283757053,0.1024769574041693,0.7544793991177113,0.5070942153258154,77.48414297272953,79.12805874176637,153.92763733822994,0.37096270399408965,0.26439130828812485,153.34841217954084,166.64287446562156,152.46240379788588];
        good_genes[4] = [0.004314506380816177,0.1020520130604253,0.7634958771512099,0.4197954665693688,77.54437078195198,95.86480754613919,159.37793184040302,0.3703821433354215,0.37547209518582536,157.19323312964303,167.3693903741553,127.25356792942583];
        */
        good_genes[0] = [0.004956113971580713,0.08934401320994198,0.8189667798051851,0.5147003151127517,75.02748326231998,79.03982549700602,142.85815447903246,0.36940208509732636,0.28675413004743683,180.88627937632032,145.5245882827331,129.59006614642257];
        good_genes[1] = [0.004906900761370975,0.09499350309531425,0.851865361955483,0.4385196469884927,91.24031262728231,105.15013399504639,142.33937404789955,0.3961322009425318,0.3166065387492232,146.8808792333415,138.6040442978155,136.10326579956822];
        good_genes[2] = [0.005662425796127217,0.11078819160474469,0.9002814838399089,0.4350354473664762,91.73372421061899,85.16710311295918,170.41918788838566,0.31523947675358954,0.2700969612281258,161.95719495734753,155.31915401035405,158.6406909400639];
        good_genes[3] = [0.0063028354183828055,0.08734564009596106,0.7155197636956535,0.48732151773674437,71.23107967836664,93.17275881541204,150.29164932890473,0.3815236641437107,0.26677193945860406,144.0131487805192,170.63919133178305,168.93068996337365];
        good_genes[4] = [0.002942729746091746,0.13243284164388994,0.5833503567433697,0.662379951069075,119.511436800401,44.107103556099716,111.80563659788862,0.3222354049119634,0.2764717804421353,153.42940531728698,177.51375165785524,127.67937147697633];

        let mother = Math.floor(Math.random() * 5);
        let father = Math.floor(Math.random() * 5);
        while (father == mother) {
            father = Math.floor(Math.random() * 5);
        }

        this.gene_number++;
        for (let i = 0; i < 12; i++) {
            new_gene[i] = (good_genes[mother][i] + good_genes[father][i]) / 2;
            if (this.gene_number <= 30) {
                let f = Math.random() * 0.3 + 0.85;
                new_gene[i] *= f;
            }
            else {
                let f = Math.random() * 1.0 + 0.5;
                new_gene[i] *= f;
            }
        }

        return new_gene;
    }

    addRobot(x, y, type, species) {
        if (species == "KILLER_ROBOT") {
            let newKillerRobot = new KillerRobot(x, y, type, this.players, this.bullets, this.leaderboard, this.map, this.generate_gene());
            this.robots[newKillerRobot.id] = newKillerRobot;
        }
        else if (species == "ROBOT") {
            let newRobot = new Robot(x, y, type, this.bullets, this.leaderboard, this.map, this.generate_gene());
            this.robots[newRobot.id] = newRobot;
        }
    }

    spawnRobots(killerRobotNumber, robotNumber) {
        for (let i = 1; i <= killerRobotNumber; i++) {
            this.addRobot(30, 30, 1, "KILLER_ROBOT");
        }
        for (let i = 1; i <= robotNumber; i++) {
            this.addRobot(30, 30, 1, "ROBOT");
        }
    }

    distance(x1, y1, x2, y2) {
        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    };

    findTarget() {
        for (let i = 0; i < this.bullets.bullets.length; i++) {
            if (this.players[this.bullets.bullets[i].id] != null) {
                this.humanCandidate[this.bullets.bullets[i].id] = true;
            }
            if (this.robots[this.bullets.bullets[i].id] != null) {
                this.humanCandidate[this.bullets.bullets[i].id] = true;
            }
        }
    }

    setTarget() {
        for (let robotId in this.robots) {
            if (this.robots[robotId].species != "KILLER_ROBOT") {
                continue;
            }

            for (let targetId in this.humanCandidate) {
                // Target is myself
                if (robotId == targetId) {
                    continue;
                }
                // Target is player
                if (this.players[targetId] != null) {
                    if (this.robots[robotId].distance(this.players[targetId].x, this.players[targetId].y, this.robots[robotId].x, this.robots[robotId].y) > 600) {
                        continue;
                    }
                    this.robots[robotId].setTarget(this.players[targetId]);
                }
                // Target is killer robot
                else if (this.robots[targetId] != null) {
                    if (this.robots[robotId].distance(this.robots[targetId].x, this.robots[targetId].y, this.robots[robotId].x, this.robots[robotId].y) > 600) {
                        continue;
                    }
                    this.robots[robotId].setTarget(this.robots[targetId]);
                }
                
                delete this.humanCandidate[targetId];
            }
        }
    }

    update() {
        let pack = [];

        this.findTarget();
        this.setTarget();

        for (let id in this.robots) {
            this.robots[id].update();

            // Remove dead robot
            if (!this.robots[id].isAlive) {
                let species = this.robots[id].species;
                delete this.robots[id];
                // And respawn it
                this.addRobot(30, 30, 1, species);
            }
        }
        for (let id in this.robots) {
            pack.push({
                x: this.robots[id].x,
                y: this.robots[id].y,
                id: id,
                dir: this.robots[id].dir,
                state: this.robots[id].state,
                motion: this.robots[id].motion,
            });
        }

        return pack;
    }
}

module.exports = Robots;